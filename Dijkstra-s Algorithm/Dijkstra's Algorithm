import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Scanner;
import java.util.*;

/**
 * Path Finding Algorithm that allows user to enter in a start and end node and it calculates a path between them with the lowest cost
 *
 * @author Nikhil Kanamarla
 * @version 1.3
 */
public class DJAlgorithms {

// important variables top be used in the project
    static Heap methodCaller = new Heap();
    static boolean end = false;
    static int z = 0;
    static int x = 0;
    static int total = 0;
    static int startnode;
    static int endnode;
    static int[][] storage;
    static int[] distance;
    static ArrayList<Integer> visted = new ArrayList<Integer>();
    static int numberOfHeap;
    static int max = 999999999;



    public static void main(String args[]) {
            try {
                // Allows user to enter starting and ending nodes or quit the program
                System.out.println("Welcome to bloody DJ town");
                System.out.println("Pick a starting node (starts from 0) (quit by entering -1)");
                Scanner input = new Scanner(System.in);
                startnode = input.nextInt();
                if (startnode == -1) {
                    System.out.println("thanks for coming to DJ town");

                    System.exit(0);
                }
                System.out.println("the user choose startnode " + startnode);

                System.out.println("Pick an ending node (quit by entering -1)");
                Scanner input2 = new Scanner(System.in);
                endnode = input2.nextInt();
                if (endnode == -1) {
                    System.out.println("thanks for coming to DJ town");
                    System.exit(0);
                }
                System.out.println("the user choose endnode " + endnode);

                set(0, startnode);

                // Reading in the matrix file
                Scanner store = new Scanner(new BufferedReader(new FileReader("/Users/ElonMusk/IdeaProjects/DJAlgorithms/src/DJ.txt")));

                // Creating a 2D array with the matrix values
                if (store.hasNextInt()) {
                    total = store.nextInt();

                    storage = new int[total][total];
                    distance = new int[total];

                    while (store.hasNextInt()) {

                        for (z = 0; z < total; z++) {


                            for (x = 0; x < total; x++) {

                                storage[z][x] = store.nextInt();

                                System.out.println(storage[z][x]);

                            }
                        }
                    }

                }

                // Populating the distance array with the inital values
                for (int i = 0; i < total; i++) {

                    distance[i] = max;

                    if (i == 0) {
                        distance[i] = 0;
                    }

                    System.out.println("current distance " + distance[i]);

                }
                System.out.println(" ");
                System.out.println(" ");

                // Send the startnode to the DJ algroithmn
                determine(startnode);


            } catch (Exception e) {
                System.out.println("Error" + e.getMessage());
                e.printStackTrace();
                System.exit(0);
            }
        }
    // @param the sent in start node
    // DJ algrithmn finds the best path from one node to another by comparing paths and finding the lowest cost in a recursive process
    public static void determine(int start) {
        while(start != endnode) {

            int temp = 0;
            int tempIndex = 0;
            int previousTemp = 999999999;
            while (temp < total) {
                if (storage[start][temp] > 0 && !(visted.contains(temp))) {

                    if (storage[start][temp] < previousTemp) {
                        previousTemp = storage[start][temp];
                        tempIndex = temp;
                        distance[tempIndex] = storage[start][temp];
                    }
                }

                temp++;
            }
            set(distance [tempIndex], tempIndex);
            determine(tempIndex);
        }

    }

    // @param the sent in new node and distance
    // Sets the new node, adds it to the visted list and prints out the path at the end
    public static void set(int distance ,int index) {
        Heap.insert(distance, index);
        numberOfHeap++;
        if(!(visted.contains(index))) {
            visted.add(index);
        }
        if(index == endnode) {
        for(int i = 0; i < numberOfHeap; i++) {
            System.out.println("Path Node " + i + ":" + " " + Heap.peekNode());
            Heap.delete();
        }
        System.out.println("thanks for visiting, it was insanely great!");
        Scanner input3 = new Scanner(System.in);
        System.out.println("Would you like to continue? 0 for yes, -1 for no");
        int userIntput = input3.nextInt();
        if(userIntput == -1) {
            System.out.println("thanks for visiting, it was insanely great!");
            System.exit(0);
        }
        if(userIntput == 0) {
            visted.clear();
            numberOfHeap = 0;
            main(null);
        }

        }
    }

}


Sample file: 
5
0 14 0 0 0
0 0 3 10 0
0 0 0 4  0
0 0 0 0 10
0 0 0 0 0
